import org.openhab.core.library.types.DecimalType

// lambda expression that can be used as a function (here with 3 parameters)
val org.eclipse.xtext.xbase.lib.Functions$Function3 rolloUpdatePercent = [
    org.openhab.core.library.items.RollershutterItem rollerShutter,
    Number initialMillis,
    Number speed
|
    var Number curDelta = (now.millis - initialMillis)*speed
    var Number newState
    if(curDelta<0)
    {	
    	newState = 100+curDelta
    	if(newState<0)
    		newState = 0
    }
    else {
     	newState = curDelta
     	if(newState>100)
     		newState = 100
  	}
	println("@rolloUpdatePercent: newState=" + newState.intValue + "  curDelta="+curDelta)
    rollerShutter.postUpdate(newState.intValue)
    return newState
]

val org.eclipse.xtext.xbase.lib.Functions$Function5 rolloTimerTick = [
    org.openhab.core.library.items.RollershutterItem rollerShutter,
    org.openhab.model.script.actions.Timer timer,
    Number initialMillis,
    Number speed,
    Number targetPercent
|
    var Number curDelta = (now.millis - initialMillis)*speed
    var Number newPercent
    var boolean needStop = false
    if(curDelta<0) {	
    	newPercent = 100+curDelta
    	if(newPercent<=targetPercent)
    		needStop = true
    	if (newPercent<0){
    		needStop = true
    		newPercent = 0
    	}
    }
    else {
     	newPercent = curDelta
     	if(newPercent>=targetPercent)
     		needStop = true
    	if (newPercent>100){
    		needStop = true
    		newPercent = 100
    	}
  	}
    if(needStop) 
        rollerShutter.sendCommand("STOP")
    else {
        rollerShutter.postUpdate(newPercent.intValue)
    	timer.reschedule(now.plusMillis(500))
    }
        	
]

val org.eclipse.xtext.xbase.lib.Functions$Function1 rolloPulseRelay = [
	org.openhab.core.library.items.SwitchItem relayItem
	|
		if(relayItem.state == ON)
			relayItem.sendCommand(OFF)
		createTimer(now.plusMillis(100)) 
		[|
			if(relayItem.state == OFF){
				relayItem.sendCommand(ON)
				createTimer(now.plusMillis(250)) 
				[|
					if(relayItem.state == ON)
						relayItem.sendCommand(OFF)
				]
			}
		]
]

//time in ms needed to completely open and close RS_GarDoor1, respectively
var Number SHUTTER_FULL_UP_TIME = 5000
var Number SHUTTER_FULL_DOWN_TIME = 5000

var org.openhab.model.script.actions.Timer timer_GarDoor1 = null
var Number initMs_GarDoor1 = 0
var Number speed_GarDoor1 = 0
var Number prevs_GarDoor1 = 0

rule "RS_GarDoor1 state change"
when 
	Item RS_GarDoor1 changed
then
	println("prevState="+previousState)
	if(previousState!=Uninitialized)
		prevs_GarDoor1 = previousState as DecimalType
end
	
//rule "RS_GarDoor1 Control Rule"
//when
//    Item RS_GarDoor1 received command 
//then
//	var String cmd = receivedCommand.toString //.upperCase 
//	println()
//	println("@1: cmd=" + cmd + ", speed="+speed_GarDoor1)
//	println("@2: curState=" + RS_GarDoor1.state + " prevState="+prevs_GarDoor1)
//	if(speed_GarDoor1==0) 
//	{
//	    switch(cmd)
//	    {
//	        case "UP":
//	        {
//	        	R_GarDoor1_down.sendCommand(OFF)
//	        	R_GarDoor1_up.sendCommand(ON)
//	        	speed_GarDoor1 = -100/SHUTTER_FULL_UP_TIME
//	        	initMs_GarDoor1 = now.millis - (prevs_GarDoor1-100) / speed_GarDoor1 
//	        	timer_GarDoor1 = createTimer(now.plusMillis(500))[|
//	        		rolloTimerTick.apply(RS_GarDoor1, timer_GarDoor1, initMs_GarDoor1, speed_GarDoor1, 0)	
//	        	]
//	        }
//	        case "DOWN":
//	        {
//	        	R_GarDoor1_up.sendCommand(OFF)
//	        	R_GarDoor1_down.sendCommand(ON)
//	        	speed_GarDoor1 = 100/SHUTTER_FULL_DOWN_TIME
//	        	initMs_GarDoor1 = now.millis - prevs_GarDoor1 / speed_GarDoor1 
//	        	timer_GarDoor1 = createTimer(now.plusMillis(500))[|
//	        		rolloTimerTick.apply(RS_GarDoor1, timer_GarDoor1, initMs_GarDoor1, speed_GarDoor1, 100)	
//	        	]
//	        }
//	        default: return 0
//	    } 
//    }
//	prevs_GarDoor1 = rolloUpdatePercent.apply(RS_GarDoor1, initMs_GarDoor1, speed_GarDoor1) as Number
//	if(speed_GarDoor1!=0)
//	{
//    	if(cmd=="STOP") 
//    	{
//        	R_GarDoor1_up.sendCommand(OFF)
//        	R_GarDoor1_down.sendCommand(OFF)
//        	speed_GarDoor1=0
//        	timer_GarDoor1?.cancel()
//        	timer_GarDoor1=null
//        }
//        else return 0
//	}
//end
